#cloud-config
write_files:
  - path: /etc/systemd/system/enable-kube-dashboard.service
    owner: "root:root"
    permissions: "0644"
    content: |
      [Unit]
      Description=Configure Kubernetes Dashboard
      [Service]
      Type=oneshot
      EnvironmentFile=/etc/sysconfig/heat-params
      ExecStart=/etc/sysconfig/enable-kube-dashboard.sh
      [Install]
      WantedBy=multi-user.target
  - path: /etc/sysconfig/enable-kube-dashboard.sh
    owner: "root:root"
    permissions: "0755"
    content: |
      #!/bin/sh
      TEMPLATE=/etc/kubernetes/addons/kubedash-secret.yaml
      mkdir -p $(dirname ${TEMPLATE})
      cat > $TEMPLATE <<EOF
      apiVersion: v1
      kind: Secret
      metadata:
        labels:
          k8s-app: kubernetes-dashboard
        name: kubernetes-dashboard-certs
        namespace: kube-system
      type: Opaque
      EOF
      TEMPLATE=/etc/kubernetes/addons/kubedash-svc.yaml
      mkdir -p $(dirname ${TEMPLATE})
      cat > $TEMPLATE <<EOF
      kind: Service
      apiVersion: v1
      metadata:
        labels:
          k8s-app: kubernetes-dashboard
        name: kubernetes-dashboard
        namespace: kube-system
      spec:
        ports:
          - port: 443
            targetPort: 8443
        selector:
          k8s-app: kubernetes-dashboard
      EOF
      TEMPLATE=/etc/kubernetes/addons/kubedash-dpl.yaml
      mkdir -p $(dirname ${TEMPLATE})
      cat > $TEMPLATE <<EOF
      kind: Deployment
      apiVersion: apps/v1beta2
      metadata:
        labels:
          k8s-app: kubernetes-dashboard
        name: kubernetes-dashboard
        namespace: kube-system
      spec:
        replicas: 1
        revisionHistoryLimit: 10
        selector:
          matchLabels:
            k8s-app: kubernetes-dashboard
        template:
          metadata:
            labels:
              k8s-app: kubernetes-dashboard
          spec:
            containers:
            - name: kubernetes-dashboard
              image: k8s.gcr.io/kubernetes-dashboard-amd64:v1.8.3
              ports:
              - containerPort: 8443
                protocol: TCP
              args:
                - --auto-generate-certificates
                # Uncomment the following line to manually specify Kubernetes API server Host
                # If not specified, Dashboard will attempt to auto discover the API server and connect
                # to it. Uncomment only if the default does not work.
                - --apiserver-host=http://127.0.0.1:8080
              volumeMounts:
              - name: kubernetes-dashboard-certs
                mountPath: /certs
                # Create on-disk volume to store exec logs
              - mountPath: /tmp
                name: tmp-volume
              livenessProbe:
                httpGet:
                  scheme: HTTPS
                  path: /
                  port: 8443
                initialDelaySeconds: 30
                timeoutSeconds: 30
            volumes:
            - name: kubernetes-dashboard-certs
              secret:
                secretName: kubernetes-dashboard-certs
            - name: tmp-volume
              emptyDir: {}
            hostNetwork: true
            # Comment the following tolerations if Dashboard must not be deployed on master
            tolerations:
            - key: node-role.kubernetes.io/master
              effect: NoSchedule
      EOF
      echo "Waiting for Kubernetes API..."
      until curl --silent "http://127.0.0.1:8080/version"
      do
          sleep 5
      done
      if [ "$(echo $KUBE_DASHBOARD_ENABLED | tr '[:upper:]' '[:lower:]')" == "true" ]; then
          echo "Setup K8S Dasboard"
          curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat /etc/kubernetes/addons/kubedash-secret.yaml)" "http://127.0.0.1:8080/api/v1/namespaces/kube-system/secrets" > /dev/null
          curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat /etc/kubernetes/addons/kubedash-svc.yaml)" "http://127.0.0.1:8080/api/v1/namespaces/kube-system/services" > /dev/null
          curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat /etc/kubernetes/addons/kubedash-dpl.yaml)" "http://127.0.0.1:8080/api/v1beta2/namespaces/kube-system/deployments" > /dev/null
      fi